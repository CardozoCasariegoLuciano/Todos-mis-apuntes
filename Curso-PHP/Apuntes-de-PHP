La sintaxis de PHP:
-------------------

	Todo el codigo escrito en PHP tiene que estar entre las etiquetas <?php ... ?>, todo lo que este fuera no se va a procesar como php
	Cada instruccion esta separada por ; (Punto y coma)
	No se va a interpretar PHP al menos que el archivo termine en .php


///////////////////////////////////////////////////////////////////////////////////////////////


[echo "unTexto";]   muestra el contenido en la pagina, utilizando el . (punto) se pueden concatenar cadenas


///////////////////////////////////////////////////////////////////////////////////////////////

Variables
----------

	Las variables son dinamicas, no hace falta indicar el tipo de dato que van a contener

	se las inicializa asi: [$<NomVariable>] ej: $nombre

	se les puede asignar un valor o cambiarle el que ya tiene con el = (Igual) ej: $nombre = "Luciano";

Funciones utiles:
-----------------

	 [var_dump(<nombVar>);] --- muestra algo asi como el debug de la variable ej: var_dump($nombre);


///////////////////////////////////////////////////////////////////////////////////////////////

Arreglos:
----------

    Los arreglos usan la estructura Clave => Valor, Por defecto PHP enumera las Claves pero se puden cambiar Ej:

        $personas = ["Pepe" , "Juan"]; ---- Esto es un arreglo simple asignado a la variable "personas"

        $personas = 
        [
            [
                "nombre" => "Pepe",
                "edad" => 20
            ],                            --- Esto es un arreglo que contiene otros arrelgos, donde estos tienen 
            [                             --- claves llamadas "nombre" y "Edad"             
                "nombre" => "Juan",       --- Los dos arreglos dentro de persona tienen como claves los numeros 0 y 1 ya que
                "edad" => 40              --- no los hemos modificado
            ]
        ];

        Para acceder a un elemento del arreglo Ej:
        
            $personas[0] -- En el caso del arreglo simple 

            $personas[0]["nombre"] -- en el caso del arreglo anidado

        (Utiliso el indice que le corresponde a cada valor, por defecto arranca arranca desde 0)

Funciones utiles:
-----------------

        [count(<NombreDelArreglo>);]  --- Retorna la cantidad de elementos del arreglo

///////////////////////////////////////////////////////////////////////////////////////////////


    Condicionales If:
    ------------------

    ssintaxis: if (<Condicion>)
                {
                [Bloque a ejecutar]  -- Este codigo solo se cumple si la <Condicion> SI se cumple
                }else{
                [Otro bloque]        -- Este codigo solo se cumple si la <Condicion> NO se cumple
                }


///////////////////////////////////////////////////////////////////////////////////////////////


    Siclos:   
    -------

        Repiten su bloque de codigo una determinada cantidad de veces



    Do ... While:
    -------------
    
    do
    {
    [UnBloqueDeCodigo]    --- Garantisa que el bloque se ejecute al menos una vez
    }
    while(<Condicion>);

====================================

    While:
    -----

    while()
    {
    [Bloque de codigo]  --- El bloque podria no ejecutarce nunca si la condicion es falsa
    };
 
====================================
 
    For:
    ----
    
    for(<Inicializador> ,<Condicion>, <Incrementador>){
    [Bloque de codigo]
    };

====================================

  
   Foreach: 
   --------
	
	 El foreach nos da una solucion facil para iterar sobre los elementos de un arreglo. El siclo se repetira tantas veces como elementos tenga el arreglo utilizado.

	en cada iteracion "<unaVariableNueva>" (que tiene que ser una variable que no exita previamente y solo tendra valides dentro del foreach) tendra el valor que corresponda con los elementos del array


   foreach(<UnArreglo> as <unaVariableNueva>)
   {
   [Bloque de codigo]
   };

	Ó
	
   foreach(<UnArreglo> as <$unaLlave> => <$unValor>)    ---Similar al foreach anterior, solo que utiliza dos variables, la primera para las llaves y la segunda para los valores
   {
   [Bloque de codigo]
   };

====================================


Funciones utiles para todos los siclos:
----------------------------------------

            continue;  --- Ternima la iteracion (sin importa si queda codigo por ejecutar) y sige con la proxima
            breack;    --- Termina el siclo directamente, sin importar si todavia quedan iteraciones 



///////////////////////////////////////////////////////////////////////////////////////////////

     Operadores Logicos:
     -------------------
            
       nombre     en PHP

        and   |   and     $a and $b   los dos son true
        or    |   or      $a or  $b   uno de los dos es true
        xor   |   xor     $a xor $b   uno de los dos es true, pero no los dos al mismo tiempo
        not   |   !       ! $a        el booleano opuesto
              |
        and   |   ||      $a || $b    los dos son true
        or    |   &&      $a && $b    uno de los dos es true

        el and y el or estan dos veces operan con distinta precedencias


     Operadores para array:
     ----------------------

        nombre           en PHP
                
        Union         |  +         $a + $b    Union de $a y $b
        Igualdad      |  ==        $a == $b   True si $a y $b tienen las mismas clave/valor
        Identidad     |  ===       $a === $b  True si $a y $b tienen las mismas clave/valor en el mismo orden y del mismo tipo
        Desigualdad   |  != o <>   $a != $b   True si $a no es igual a $b


Funciones utiles para los operadores aritmeticos
--------------------------------------------------

            floor(<unaCuenta)>;  --- ti tiene decimales, lo lleva al entero anterior Ej, 2,3333 = 2 y 4,9999 = 4







///////////////////////////////////////////////////////////////////////////////////////////////


         Funciones:
        ------------
                    
            function <NombreFuncion>(){    --- Entre los parecentesis van los parametros (Opcionales) pero solo pueden ser variables
               [Bloque de codgio]
            }



Palabras utiles:
----------------
        
        return <contenido a retornar>;  ---Tambien termina con la funcion (algo asi como el break de los siclos) en ese caso es 
                                           [return;](sin contenido a retornar



///////////////////////////////////////////////////////////////////////////////////////////////


    Archivos Externos:
    ------------------
        
        El archivo externo tiene que estar en la misma carpeta que nuestro php

            include("NombreDerArchivo") ---si no lo encuentra tira una advertencia, pero igual va a tratar de correrlo
            require("NombreDerArchivo") ---si no lo encuentra tira un error fatal y corta todo 



             include_ones("NombreDerArchivo")  
                        o                      ---solo lo puede añadir una sola vez, si importar cuantas veces se hagan los
             require_ones("NombreDerArchivo")  ---includes/requires al mismo archivo




	
