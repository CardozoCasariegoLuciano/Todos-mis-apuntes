La sintaxis de PHP:
-------------------

	Todo el codigo escrito en PHP tiene que estar entre las etiquetas <?php ... ?>, todo lo que este fuera no se va a procesar como php
	Cada instruccion esta separada por ; (Punto y coma)
	No se va a interpretar PHP al menos que el archivo termine en .php

una caracteristca del lenguaje:

        type-hinting: es el nombre que se le da a esta caracteristica de PHP, sirve para forzar a una funcion a que solo 
                      acepte parametros de sierto tipo, pueden ser INT,bool, objetos (indicando la clase), interfaces, etc.

                      se escribe antes del parametro, dentro de los parentesis, Ej
        
                           public function multiplicacion (Int $unNumero) -- de esta forma me aseguro que $unNumero es un INT


	Las comillas: Las comillas simples ('') leen todo tal cual mientras que las comillas dobles ("") evaluan lo que tengan que evaluar

///////////////////////////////////////////////////////////////////////////////////////////////


[echo "unTexto";]   muestra el contenido en la pagina, utilizando el . (punto) se pueden concatenar cadenas


///////////////////////////////////////////////////////////////////////////////////////////////

Variables
----------

	Las variables son dinamicas, no hace falta indicar el tipo de dato que van a contener

	se las inicializa asi: [$<NomVariable>] ej: $nombre  (siempre con el signo pesos $)

	se les puede asignar un valor o cambiarle el que ya tiene con el = (Igual) ej: $nombre = "Luciano";

Funciones utiles:
-----------------

	 [var_dump(<nombVar>);] --- muestra algo asi como el debug de la variable ej: var_dump($nombre);


///////////////////////////////////////////////////////////////////////////////////////////////

Arreglos:
----------

    Los arreglos usan la estructura Clave => Valor, Por defecto PHP enumera las Claves pero se puden cambiar Ej:

        $personas = ["Pepe" , "Juan"]; ---- Esto es un arreglo simple asignado a la variable "personas"


     Para agregar otro valor al array normal: 
	 $personas[] = <ElNuevoElemento>    --- Tambien podemos poner un indice entre los corchetes para tambien 
					    --- indicar en que pocicion queremos a este elemento (tener cuidado
					    --- porque puede reemplazar los valores y saltearme pociciones)

     Para agregar otro valor al array clave=>valor:
	$personas[<clave>] = <valor> ; 	
		


        $personas = 
        [
            [
                "nombre" => "Pepe",
                "edad" => 20
            ],                            --- Esto es un arreglo que contiene otros arrelgos, donde estos tienen 
            [                             --- claves llamadas "nombre" y "Edad"             
                "nombre" => "Juan",       --- Los dos arreglos dentro de persona tienen como claves los numeros 0 y 1 ya que
                "edad" => 40              --- no los hemos modificado
            ]
        ];

        Para acceder a un elemento del arreglo Ej:
        
            $personas[0] -- En el caso del arreglo simple 

            $personas[0]["nombre"] -- en el caso del arreglo anidado

        (Utiliso el indice que le corresponde a cada valor, por defecto arranca arranca desde 0)

Funciones utiles:
-----------------

        [count(<NombreDelArreglo>);]  --- Retorna la cantidad de elementos del arreglo

	[is_array(<NombreDelArreglo>)]; --- Retorna TRUE si el array por parametro es efectivamente un array
					--- falso si no lo es (error si no existe)

	[sort(unArray)];  ---ordena el array de mayor a menor 

	[var_dump(unArray)]; --- tambien sirve para arrays, mostrando todo lo que tiene

///////////////////////////////////////////////////////////////////////////////////////////////


    Condicional If:
    ------------------

    sintaxis: if (<Condicion>)
                {
                [Bloque a ejecutar]  -- Este codigo solo se cumple si la <Condicion> SI se cumple
                }else{
                [Otro bloque]        -- Este codigo solo se cumple si la <Condicion> NO se cumple
                }


====================================


    Condicional Ternario:
    --------------------

    sintaxis: <condicion> ? <Bloque si es true> : <Bloque si es false>


====================================


    Condicional Switch-case:
    ------------------------
		
    sintaxis: switch ($unValor){

		case unValor: <Codigo>;
		break;		 	   ---El break separa los distintos case (tiene que estar si o si)

		case unValor: <Codigo>;    ---tantos case como quiera
		break;

		case unValor: <Codigo>;
		break;

		default: <Codigo>;        ---El default se ejecuta cuando ninguna de las anteriores se cumple
	      }


se ejecutara el bloque en el que coincida $unValor con el de alguno de los cases


///////////////////////////////////////////////////////////////////////////////////////////////

 Compara dos string:
 -------------------

		para eso tenemos dos funciones, dependiendo de los string que pasemos por parametros ambas retornan 1 (true) si son distintas o 0 (falce) si son iguales (si, es confuso pero es asi, true si son distintos)

		strcmp(string1,string2);       en esta funcion si importa si las palabras estan o no en mayusculas

		strcasecmp(string1,string2);   en esta funcion no importa si las palabras estan o no en mayusculas

///////////////////////////////////////////////////////////////////////////////////////////////


    Siclos:   
    -------

        Repiten su bloque de codigo una determinada cantidad de veces



    Do ... While:
    -------------
    
    do
    {
    [UnBloqueDeCodigo]    --- Garantisa que el bloque se ejecute al menos una vez
    }
    while(<Condicion>);

====================================

    While:
    -----

    while()
    {
    [Bloque de codigo]  --- El bloque podria no ejecutarce nunca si la condicion es falsa
    };
 
====================================
 
    For:
    ----
    
    for(<Inicializador> ,<Condicion>, <Incrementador>){
    [Bloque de codigo]
    };

====================================

  
   Foreach: 
   --------
	
	 El foreach nos da una solucion facil para iterar sobre los elementos de un arreglo. El siclo se repetira tantas veces como elementos tenga el arreglo utilizado.

	en cada iteracion "<unaVariableNueva>" (que tiene que ser una variable que no exita previamente y solo tendra valides dentro del foreach) tendra el valor que corresponda con los elementos del array


   foreach(<UnArreglo> as <unaVariableNueva>)
   {
   [Bloque de codigo]
   };

	Ã“
	
   foreach(<UnArreglo> as <$unaLlave> => <$unValor>)    ---Similar al foreach anterior, solo que utiliza dos variables, la primera para las llaves y la segunda para los valores
   {
   [Bloque de codigo]
   };

====================================


Funciones utiles para todos los siclos:
----------------------------------------

            continue;  --- Ternima la iteracion (sin importa si queda codigo por ejecutar) y sige con la proxima
            breack;    --- Termina el siclo directamente, sin importar si todavia quedan iteraciones 



///////////////////////////////////////////////////////////////////////////////////////////////

     Operadores Logicos:
     -------------------
            
       nombre     en PHP

        and   |   and     $a and $b   los dos son true
        or    |   or      $a or  $b   uno de los dos es true
        xor   |   xor     $a xor $b   uno de los dos es true, pero no los dos al mismo tiempo
        not   |   !       ! $a        el booleano opuesto
              |
        and   |   ||      $a || $b    los dos son true
        or    |   &&      $a && $b    uno de los dos es true

        el and y el or estan dos veces operan con distinta precedencias


     Operadores para array:
     ----------------------

        nombre           en PHP
                
        Union         |  +         $a + $b    Union de $a y $b
        Igualdad      |  ==        $a == $b   True si $a y $b tienen las mismas clave/valor
        Identidad     |  ===       $a === $b  True si $a y $b tienen las mismas clave/valor en el mismo orden y del mismo tipo
        Desigualdad   |  != o <>   $a != $b   True si $a no es igual a $b


Funciones utiles para los operadores aritmeticos
--------------------------------------------------

            floor(<unaCuenta)>;  --- si tiene decimales, lo lleva al entero anterior Ej, 2,3333 = 2 y 4,9999 = 4

	    





///////////////////////////////////////////////////////////////////////////////////////////////


         Funciones:
        ------------
                    
            function <NombreFuncion>(){    --- Entre los parecentesis van los parametros (Opcionales) pero solo pueden ser variables
               [Bloque de codgio]
            }

	Caracteristicas especiales de las funciones en PHP:
	-------------------------------------------------
			
			* Parametros por defecto:
			  en el momento de declarar una funcion yo puedo escribir un paramatro con un valor, eso hace que ese parametro sea opcional, si no pongo nada por defecto va a valer ese valor que le indique
			  ej:
			
				function sumar10Alnumero($unNumero, $mensajeSalida = "El resultado es: "){
					$unNumero += 10; 							--- Esta funcion requiere que le pasemos un valor para el parametro $unNumero para que funcione, sin embargo  
														--- no hace falta para el segundo ya que ya tiene un valor por defecto (que lo podemos cambiar dentro de la funcion)

					return "$mensajeSalida $unNumero";
				}

			
			* Parametros por referencia:

				Pasar una variable como parametro por referencia en una funcion hace que este cambie por fuera de la funcion, (mientras que con un parametro normal lo que pasa dentro de la funcion quda en la funcion

			ejemplo:
			
				function sumarUno(&$unValor){    <---SINTAXIS Para que sea por referencia tiene que ir el signo & antes que el de $ en la variable
					$unValor++;		  --- Basicamente lo que hace es crear un vinculo entre la variable que utilizo tanto dentro como fuera de la funcion 
					return $unValor;
				}				

				$unNumero = 5;

				echo (sumarUno($unNumero));	  <--- esto va a imprimir un 6 porque es lo que hace la funcion sin importar que sea o no por referencia

				echo ($unNumero);     		  <--- Pero esto no va a retornar un 5, ya que aunque la variable $unNumero la defini fuera de la funcion tambien va a sufrir los cambios de la funcion 
							 	   --- ya que la pase como un parametro por referencia (por lo que tambien imprimiria un 6)
					






Palabras utiles:
----------------
        
        return <contenido a retornar>;  ---Tambien termina con la funcion (algo asi como el break de los siclos) en ese caso es 
                                           [return;](sin contenido a retornar



///////////////////////////////////////////////////////////////////////////////////////////////


    Archivos Externos:
    ------------------
        
        
            include("NombreDerArchivo") ---si no lo encuentra tira una advertencia, pero igual va a tratar de correrlo
            require("NombreDerArchivo") ---si no lo encuentra tira un error fatal y corta todo 



             include_ones("NombreDerArchivo")  
                        o                      ---solo lo puede aÃ±adir una sola vez, si importar cuantas veces se hagan los
             require_ones("NombreDerArchivo")  ---includes/requires al mismo archivo



///////////////////////////////////////////////////////////////////////////////////////////////


 nameSpaces:
 -----------
        
                    Es una forma de mantener unicos los nombres de los archivos en el mismo directorio, esto nos permite tener
                    Nuestro proyecto mas organizado


                    namespace <unNombre>;  --- Tiene que ser la primer sentencia declarada (justo debajo de la etiqueta PHP)

                    
                   Investigar mas cuando tenga problemas con librerias que usan los mismos nombres que yo tengo xD
	
			
		 Algo para que este tema sea mas facil es usar "Composer" (Googlearlo) por que noso ayuda a implementar librerias de 
       		 terceros 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    Programacion orientada a objetos en PHP
    ----------------------------------------

    cosas utiles:
    -------------
                    * Para referirse al objeto actual: $this
                    * Para asignarle un valor a un colaborador: $nombObjeto -> nombColaborador = valor; (sin el $ en el colaborador)   
                    * para acceder al valor de un colaborador: $nombObjeto -> nombColaborado;  (sin el $ en el colaborador)

                    * Para usar un Metodo: $nomObjeto -> <NomDelMetodo>();

    Clases:
    -------

            class <NombreDeLaClase> 
            {
                [Visivilidad] <NomDelColaborador>;   --- Asi se definen los colaboradores internos, en PHP es una variable ($nombre)
                                                    --- La visivilidad puede ser publica: todos la pueden usar directamente
                                                    ---                          private: no la pueden usar fuera de la clase, para eso 
                                                    ---                                   se tienen que crear metodos PUBLICOS que puedan
                                                    ---                                   dar esa informacion
                                                    ---                          protected: igual que la anterior, pero tambien la pueden
                                                    ---                                     ver las clases hijas
						   			 
            
                [Visivilidad] function <NomDelMetodo> (){ --- Si lleva un parametro, tambien se tiene que escribir como una variable
                       [bloque de codigo];                --- osea ($nombre)
                                                          --- puede o no tener un return
                } 

            }

      *  colavoradores o metodos estaticos: que sea estatico significa que no permite que instancias de si mismos puedan tener su propia vercion de de ese colavorador/metodo sino que se comparten para todas las instancias

		De todas formas preguntar mas como funcionan los colavoradores o metodos estaticos

		datos:
			para acceder a estos colavoradores o metodos estaticos desde una de las instancias tengo que hacerlo asi: [<nombreDeLaCLASE>::<NombreDeLoQueSeaEstatico>] o [self::<NombreDeLoQueSeaEstatico>]

	

      *  Para crear un nuevo objeto de una clase:
        
             $nombreDelObjeto = new nobmreDeLaClase();  --- puede ir con parametros si tiene un constructor


      *  Es una muy buena practica tener cada clase en un archivo distinto, con el nombre de esa clase y luego ir conectadolas con 
         includes o requires

	
      




    Constructores:
    --------------
                
                El constructor es un metodo ESPECIAL que se utiliza para inicializar un objeto al momento de crearlo
                Es otro metodo mas, por lo que se escriben dentro de las {} (llaves) de [CLASS]
        
                Se escriben asi:
           
                        public function __construct()    --- Doble guion bajo, y dentro del paretecis van los parametros a inicializar
                        {                                 
                            [Codigo]                     
                        }

                    -------------- Ejemplo --------------

                        public function __construct($unNombre, $unAÃ±o)
                        {
                            $this-> nombre = $unNombre;   --- Y ahora cuando se quiera crear un objeto de esa clase va a tener que llevar
                            $this-> anoNac = $unAÃ±o;      --- esos dos parametros (En la parte del  new...)
                        }                        


    Herencia:
    ---------

    * Es importante hacerle un include o require a la clase padre si esta en otro archivo (que asi deberia ser)

        La herencia (si tiene) se marca en cada clase y se escribe con la palabra [extends] Ej:
        
            class alumno extends persona{
                                            --- Aca lo que digo es que la clase alumno es hijo de la clase persona, por lo que 
            }                               --- hereda todos los metodos que tenga la clase padre


    Si quiero tener un constructor en la clase hijo pero tambien quiero el constructor del padre se usa [parent::__construct();] Ej:
                           
                        public function __construct($unNombre, $unAÃ±o)
                        {                                                         --- tengo que usar los mismos parametros(como minimo) 
                            $otroNombre = "el nombre del hijo es" . $unNombre     --- que esten en el padre
                            Parent::__construct($otroNombre, $unAÃ±o);             --- en este constructor uso al mismo del padre, pero tiene
                        }                                                         --- otras modificaciones 

										  --- El mensaje [parent:: <unMensajeDeLaClasePadre>]  lo que hace es ejecutar todo el mensaje elejido para luego usarlo 


       interfaces:        
       -----------
                
         se lo puede ver como un requisito que tiene que tener la clase que la implemente, esto esta bueno para garantizar que 
         esa clase va a poder responder a siertos mensajes

        una interfaz se crea en un arcihivo aparte como las clases y se las escribe asi:

            	interface NombreDeLaIntefaz {
                    [....            		            
                        Todos los mensajes que tienen que entender
                        las clases que implementen esta interfaz.
                        pero solo nos nombres, no la implementacion
                    ...]
            	}

                ejemplo

            	interface printable 
                {
                    public function getDescription();                    
            	}


        Para aplicarle una interfaz a una clase es tan simple como poner luego del nombre de la clase o de la clase padre (si tiene)
       [implements NombreDeLaInterfaz]

                ej:  class alumno extends persona implements estudiar
                       {
                         ...
                       }


    *Datos:
            La interfas que tenga un padre la heredan los hijos


    

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Conectarse a una BASE DE DATOS con PHP:
	---------------------------------------

			
			Hay 4 datos que son importantes a la hora de estableser una conexion con nuestra base de datos: 
				* La direccion del servidor de la base de datos				
				* El usuario de la base de datos (por defecto es root)
				* la contraseÃ±a del usuario (por defecto no tiene, osea "" comillas vacias)
				* El nombre de la base de datos


			hay dos maneras de hacerlo: la orientada a objetos y la orietada a prosedimientos


	

		orietada a prosedimientos:
	----------------------------------------

					antes que nada es una buena practica tener cada una de las sigientes
					funciones guardadas en una variable para que el codigo sea mas facil 
					de leer, pero no es necesario
		ejemplo:

		 	  $bd_host= "localhost";   		-- direccion de la bd		   	  
  			  $db_usuario= "root";	   		-- usuario
  			  $db_contra= "";	   		-- contraseÃ±a 
			  $db_nombre= "cursophp_pildorayt";	-- nombre de la bd

					--- arriba me estoy guardando la informacion importante para 
					--- tenerla en variables mas comodas de usar
 

  			  $conexion = mysqli_connect($bd_host, $db_usuario, $db_contra,  $db_nombre);

					--- en la variable $conexion estoy guardando justamente la conexion que se 
					--- consigue con la funcion [mysqli_connect()] que como parametro recibe como
					--- parametros los datos importantes del principio (que tengo el otras variables
					--- en el orden en el que estan


			 if(mysqli_connect_errno())  ---OPCIONAL este if evita que salten errores
			 {			     
			    exit();     --- funcion propia de PHP que lo que hace es salir del bloque PHP
			 }	 	--- directamente. En este caso, si no se puede conectar a la BD sale 
					--- del bloque para evitar errores y que otro codigo se pueda ejecutar
				
					--- La funcnion [mysqli_connect_errno()] se utiliza justo debajo de 
					--- intentar establecer la conexion con la base de datos y
					--- retorna un booleano, TRUE si se encontro con un problema 

			mysqli_set_charset($conexion, "utf8") --OPCIONAL permite a la BD leer carateres latinos

	----------------hasta aca mi archivo ya esta vinculado con mi base de datos----------------
				
		hacele una consulta:
		-------------------

  			  $consulta = "SELECT * FROM  datosusuarios";

					--- Aca estoy guardando una consulta escrita en SQL

   			  $resultado = mysqli_query($conexion, $consulta);					
					
					--- La funcion [mysqli_query()] ejecuta una consulta y recive como
					--- parametros una CONEXION a la bd y una CONSULTA
					--- (por eso esta bueno usar variables)
					--- internamente lo que hace es crear una tabla virtual con los resultados
					--- de nuestra consulta
			 
   			  $fila =mysqli_fetch_row($resultado);

					--- La funcion [mysqli_fetch_row()] "mira" la informacion de la tabla virtual
					--- que recive como parametro. OJO, solo mira la primer tupla, si lo vuelvo a
					--- ejecutarme da la segunda, y asi con el resto, puedo usar un siclo
					--- para verlas todas (solo mira, no muestra en pantalla)
					--- el resultado lo expresa dentro de un array (osea eso es lo que retorna)
 			  
			
				*para acceder e imprimir todas las tuplas de la funcion [mysqli_fetch_row()]
				
				  	  while ($fila =mysqli_fetch_row($resultado))
   					  {
    					    echo "$fila[0]  <br>";
    					    echo "$fila[1]  <br>";
    				 	  };
						--- puedo usarlo diractamente en la condicion del while porque
						--- tambien retorna un booleano, true si encuentra una tupla y
						--- false si ya no encuentra ninguna
						--- No funciona si solo uso la variable $fila, tengo que usarlo
						--- todo


	----------------hasta aca ya esta la consulta----------------

				
		mysqli_connect($conexion)  ---cierra la coneccion con la bd para que ya no consuma recursos










 














	
