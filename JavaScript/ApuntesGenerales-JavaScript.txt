//variables

var miVariable;
var otraVariable = 0;



// Funciones Declarativas

function miFuncion(){

	return "miFuncion";
}


function saludarA(unaPersona){

	console.log("Hola ${unaPersona}")  // <-- ${enParametro} asi de raro se llama aun parametro para una cadena de texto
}


var nombre = Luciano;

function saludar(){

	return "Hola " + nombre;  // se concatena asi nomas
}



//Funciones de exprecion o anonimas
var suma = function(a ,b){
	return a + b;
}



//Coerción es la forma en la que podemos cambiar un tipo de valor a otro, existen dos tipos de coerción:
//Coerción implícita = es cuando el lenguaje nos ayuda a cambiar el tipo de valor.
//Coerción explicita = es cuando obligamos a que cambie el tipo de valor.
//   y se hace asi: TipoQueQueremos( elValor )
//     ejemplos  
//             Number("45"); --> 45
//             Number(true); --> 1 (false = 0)
//             String(false); --> "false
//             Bool(0); --> false




//Ejemplos en los que Boolean devuelve Falso:
Boolean(0); //false
Boolean(null); //false
Boolean(NaN); //false
Boolean(undefined); //false
Boolean(false); //false
Boolean(""); //false

//Ejemplos en los que Boolean devuelve verdadero:
Boolean(1); //true para 1 o cualquier número diferente de cero (0)
Boolean("a"); //true para cualquier caracter o espacio en blanco en el string
Boolean([]); //true aunque el array esté vacío
Boolean({}); //true aunque el objeto esté vacío
Boolean(function(){}); //Cualquier función es verdadera también


// Tipos de Operadores

3 == "3" //true, no es estricto en cuanto al tipo
3 === "3" // false, es estricto y no son del mismo tipo

!true // false, negacion

1+1 // suma de numeros o concatenacion de Strings
1*1 // multiplicacioin
1/1 // divicion entera
1-1 // resta

< // menor que 
> // mayor que 
>=// mayor o igual que
<=// menor o igual

&& // and
|| // or


// Condicionales

	// if
	if(true){
 	console.log("Holaa");
	}

	//Condicional ternario ---->  condicion ? siEsTrue : siEsFalse

	4==5 ? console.log("Holaa") : console.log("Chau");


	//Switch

	switch(3){
		case 1: console.log("1");
			break;
		case 2: console.log("2");
			break;
		case 3: console.log("3");  // saldria esto
			break;
		default: console.log("default")
	}



// arrays

//como crearlo
var frutas = ["Manzana", "Platano", "Peras", "uvas"];


//Como acceder a un elemento
console.log(frutas[0]); // "Manzana"

console.log(frutas[2]); // "Peras"


// su longitud
console.log(frutas.length); // 4


//como agreagar un elemento al final del array

frutas.push("Tomate");

//como agreagar un elemento al principio del array

frutas.unshift("Tomate");


//Como eliminar el ultimo elemento del array

frutas.pop();


//Como eliminar el primer elemento del array

frutas.shift();


// Como buscar el indice de un elemento del array

frutas.indexOf("Manzana") // retorna 0
frutas.indexOf("Uvas") // retorna 3


// loops(siclos)

for (var i = 0; i < frutas.length; i++) {  // el for de toda la vida

	console.log(frutas[i]);	
}


for (var fruta of frutas) {
	console.log(fruta);        //el foreach de toda la vida
}



var count = 0;
while(frutas.length > 0){  // el while de toda la vida

	count ++;
	frutas.shift();
}



//Objetos (pero no me gusta como lo aprendi, seguro hay otras formas)


var auto = {

	//variables
	marca: "Toyota",
	modelo: "corola",
	annio: 2020,  // auque sea el ultimo, tambien lleva una coma al final ya que los ve a las variables y metodos como una sola cosa

	
	//metodos
	detalleDelAuto: function(){
		console.log("la marca del auto es " + this.marca + ", el modelo es: " + this.modelo + " y el año es: " + this.annio); // se usa el this. como en java
	}								// o ${this.marca}                         o ${this.modelo}                    o ${this.annio} 
}


//funcion constructor
function auto(marca, modelo, annio){

	this.marca = marca;
	this.modelo = modelo;
	this.annio = annio;
}




//Crear una instanca y llamar algunos metodos/variables

var unAuto = new auto("peugeot", "505", 2005);


auto.detalleDelAuto(); // todo el texto
auto.marca // "Toyota" igual que en java

 
