Vim es un editor de texto desde la consola y su principal característica es que se centra en 
no usar el mouse para nada, de hecho estos apuntes lo voy a hacer así siempre que pueda ;)

NOTA: Algunos de estas acciones pueden cambiar con el uso de algunos pluggins o configuraciones en el .vimrc(ver mas abajo)

Básicos para leer estos apuntes:
 Para deshacer un cambio = u
 Para reHacer un cambio = Ctrl + r
 Para salir de cualquier modo = Esc
 Para escribir un comando = :<NombreComando>
 Para salir de vim = :q
 Para abrir un plegado = za


Modo Insertar:
   i : Activa el modo de escritura justo donde tengo el puntero (el cursor lo pone ANTES de la barra)
   I : Activa el modo de escritura al principio de la linea
   a : Activa el modo de escritura justo donde tengo el puntero (el cursor lo pone DESPUÉS de la barra)
   A : Activa el modo de escritura al final de la linea
   o : Activa el modo de escritura en la linea de abajo 
   O : Activa el modo de escritura en la linea de arriba 
   s : elimina el carácter actual e ingresa al modo escritura
   S : elimina toda la linea e ingresa al modo escritura
     
     <Num>i = repite lo que escriba <Num> veces (lo aplica una vez salgo del modo insertar)
     NOTA: en el comando uso "i" pero puede ser cualquier otro que ingrese al modo escritura 
     	
     Estando en el modo Insertar:
       Ctrl-h  Borrar un carácter
       Ctrl-w  Borrar una palabra
       Ctrl-u  Borrar una línea entera
       Ctrl-o = Me permite escribir un comando como si estuviera en el modo normal 
					(Solo un, luego vuelvo al M.I)


Modo Visual:
   v = cambiar al modo vista
   aw = (estando en el modo visual) marca una palabra
   ab = (estando en el modo visual) marca un bloque delimitado por () 
   aB = (estando en el modo visual) marca un bloque delimitado por {}
    
     o = nos posiciona el puntero al principio o al final del bloque seleccionado
         si queremos expandirlo hacia arriba o hacia abajo solo nos acomodamos con
         esta letra
        
     Ctrl+v = nos selecciona de a lineas enteras


Los números:
   los números multiplican la cantidad de veces que se va a ejecutar la próxima letra
    
   Ejemplos:
     4j : me muevo 4 lugares para abajo
     22dw: elimino las siguientes 22 palabras


Movimiento:
   h : Me muevo hacia IZQUIERDA
   j : Me muevo hacia ARRIBA
   k : Me muevo hacia ABAJO
   l : Me muevo hacia DERECHA
   
   gg : va al principio del archivo 
   G : va al final del archivo
   [num]G: me manda a la linea que indique en [num]
   
   w : salta a la siguiente palabra
   b : salta a la palabra anterior
   e : salta al final de la siguiente palabra

   % : en caso que este parado en un elemento "cerrable", me manda al otro
     ej: si estoy parado en el "{" de una funcion y toco %, me manda al "}"
   
   0 : nos manda al principio de la linea
   $ : nos manda al final de la linea
   
   zt : posiciona la pantalla de forma que el puntero quede en la parte superior de la pantalla
   z. o zz : posiciona la pantalla de forma que el puntero quede en la parte central de la pantalla
   z- : posiciona la pantalla de forma que el puntero quede en la parte inferior de la pantalla


Scroll:
   Ctrl-e    Desplaza el texto hacia arriba una línea
   Ctrl-d    Desplaza media pantalla hacia arriba
   Ctrl-y    Desplaza el texto hacia abajo una línea
   Ctrl-u    Desplaza media pantalla hacia abajo


Copiar y pegar:
   Si ya tengo texto seleccionado (con el modo visul) uso una sola "d" o "y"
 
   dd : corta TODA la linea
   d[num]d : corta tantas lineas como indique con [num]
   
   yy : copia TODA la linea
   y[num]y : copia tantas lineas como indique con [num]
   
   p : pegar (Lo pega en la linea de abajo)
   P : pegar (lo tega en la linea de arriba)
   Ctrl-r " : pegar (estando dentro de modo insertar)
   
      Para copiar, borrar o mover un texto sin usar el M.V ni mover el puntero:
       
      :{nroLinea_inicio},{nroLinea_Final}xx{nroLinea_Destino}
         
         {nroLinea_inicio} y {nroLinea_Final} ==> son los números de linea del código que quiero 
                                                   cortar, mover o eliminar, si no pongo un nroLinea_Final
                                                   solo trabajara con la linea indicada
         xx ===> es el comando que quiero ejecutar, co = copiar || mo = mover || d = borrar
         {nroLinea_Destino} ==> es la linea destino en la que quiero pegar o mover (para eliminar no hace
                                 falta). Si en lugar de un numero de linea pongo un punto (.),
                                 se va a pegar en la linea actual
         NOTA: para las lineas relativas al puntero uso los signos + y - antes de cada posición. 
            EJEMPLO)
                  :+15,+5mo-20 => muevo el contenido que hay entre 15 y 5 lineas mas abajo del puntero y
                                    las pego 20 lineas arriba del mismo


Borrar:
   x  =	Borrar un caracter
   dw =	Borrar una palabra(a partir del puntero)
   diw =	Borrar una palabra entera
   d$ =	Borrar parcialmente una linea (borra toda la linea partir del puntero)
   di<elcontenedor> =	Borrar contenido de un "Contenedor" pero sin borrar a este
			ejemplo: "Hola Mundo" <-- di"--> ""
						(1,2,3,4) <-- di( --> ()	
	 da<elContenedor> = igual al anterior pero este tambien borra el elemento contenedor


Reemplazar
   r : la próxima letra que escriba va a reemplazar a la letra en la que estoy parado
   R : lo mismo que en minúscula pero de queda en ese modo
   cw: corta la palabra en la que estoy parado (a partir del puntero )y me pone en el modo escritura
   ciw: corta la palabra entera y me pone en el modo de escritura
                                                 	
     :s/[palabraActual]/[palabraNueva]       cambia la primera [palabraActual] que encuentra y la cambia 
                                                por [palabraNueva]
     :s/[palabraActual]/[palabraNueva]/g     cambia todas las palabras [PalabraActual] de la linea  y 
                                                las cambia por [palabraNueva]
     :%s/[palabraActual]/[palabraNueva]/g    cambia todas las palabras [PalabraActual] del archivo  y
                                                las cambia por [palabraNueva]
     :%s/[palabraActual]/[palabraNueva]/gc   cambia todas las palabras [PalabraActual] del archivo  y 
                                                las cambia por [palabraNueva] pero me pregunta en 
                                                cada palabra si realmente lo quiero hacer
          unos ejemplos:
                :%s/\d/"\0"/   --> a todos los números les agrega comillas antes y después
                    % --> indica que la búsqueda sera en todo el documento
                    s --> sustituir
                    \d --> expresión regular, todos los dígitos
                    "\0" --> las comillas son literalmente comillas, \0 indica el patrón de búsqueda
                              (en este caso \d) NOTA: otra forma equivalente a \0 es &


      Reemplazar en múltiples archivos:

          :args *.txt                captura todos los archivos txt en la ubicación actual
                                         :args muestra la lista 
          :argdo %s/dog/chicken/     realiza la sustitución en todos los archivos 
          :argdo update              guarda los archivos modificados


Plegar código(Fold):
   existen 6 tipos de plegados, acá solo voy a anotar el manual (por defecto), el indent y el syntax
      
    USO:
      zf --> es el operador base para el plegado, este se puede combinar con otras teclas 
              de movimiento para incluir mas lineas
              ejemplo: zfj ==> esto hace un Fold de la linea actual y la de abajo (Movimiento j)
                       zfa{ ==> hace un fold a todo el contenido de una llave
                       NOTA: tambien se puede hacer un fold sobre un texto seleccionado (usando zf)
                     
      zo --> Abrir un texto plegado
      zc --> Cerrar un texto plegado
         
      zd --> elimina el pliegue en el que estoy parado
      zR --> Abrir todos lo plegados del archivo
      zM --> Cerrar todos los plegados del archivo
      za --> para alternar el estado en el que se encuentra un plegado
      zE --> elimina todos los pliegues del archivo
     
     Plegado persistente:

          por defecto todos los plegados se pierden al cerrar el buff

          :mkview  --> guarda todos los plegados hasta el momento
          :loadview --> al entrar a un archivo, este comando crea todos los plegados guardados
                          en ese archivo
                      
   El plegado en modo "indent" se crea solo cuando detecta un cambio en la indentación

   El plegado en modo "syntax" se crea automáticamente dependiendo de la sintaxis del lenguaje usado


Comandos:
	 Basico:
		:w = guardar
		:w <unNombre> = guardar un archivo nuevo, se le asigna ese nombre
		:q = salir de Vim
		:q! = Forzar salir
		:wq = Guardar y salr
		:x = Guardar y salir (lo mismo que :wq)
   
   Abrir/Editar:
		:e <nombreDeUnArchivo> = lo abre en otro buffer (ver mas abajo)
      
   Buscar Archivos:
		:find <nombreDeUnArchivo> = lo abre en otro buffer, la diferencia con :e es que este ultimo solo 
											 busca en la carpeta actual mientras que :find busca en el path.
                       (hay que modificar el path para que busque donde querramos)
      Path:
        :set path? = nos muestra el path
        :set path+=<RutaAagregar/**> = nos agrega es ruta al path, al final /** para todas las subCarpetas
                              NOTA: evitar agregar path muy grandes(Con muuuchos archivos)


Buscar:
   :/[UnaPalabra] = busca la palabra
   n = va a la siguiente palabra
   N = va a la palabra anterior

		*(sobre una palabra) = busca todas las palabras iguales
		f<unSimbolo> = pone el puntero en la primera aparición de <unSimbolo> en lo que queda de linea
		F<unSimbolo> = pone el puntero en la primera aparición de <unSimbolo> en lo que paso de la linea 


Terminal:
   :shell = nos abre una terminal, para salir escribimos "exit"
   :terminal = nos abre una terminal en una nueva división de pantalla (horizontal)
   :vert:term = igual que el comando de arriba pero la división la hace en vertical
	 :! <comando> = nos ejecuta el comando de la terminal de linux 
      


Comando Global:
   El comando global de Vim es utilizado para ejecutar un comando de la línea de 
   comandos en múltiples líneas de manera simultánea.
   
   :g/patron/comando  --> "patron" puede ser una palabra o una expresión regular

    Ejemplo:

        :g/console/d  --> en todas las LINEAS que contengan la palabra "console" le aplica el comando "d"
                            (delete)

        :g!/console/d  --> el g! indica todas las lineas que NO contengan la palabra "console"

        :g/./normal A;  --> con el . indico cualquier caracter (cualquier linea que no este vacía).
                            Con "normal" indico que lo siguiente sega un comando valido para ese modo
                            con A indico que voy a ingresar al modo Insertar al final de la linea
                            ; es lo que voy a escribir
                            En resumen ese comando agrega un ; al final de cada linea que no este vacía


Otros:
   view {archivo} = en lugar de vim uso view, esto abre el archivo pero no me deja editarlo
	 << = hace una tabulacion
	 >> = quita una tabulacion
			Si tengo texto seleccionado lo aplica a todo el codigo
   '. = salta a la ultima linea editada
   .  = repetir el ultimo comando 
   ;  = repite el ultimo comando de movimiento
   J  = une la linea inferior a la actual	
   :smile = ¡Sonrie!
   gUiw y guiw = pasan la palabra a MAYUSCULAS o MINUSCULAS respectivamente
   :ab <abreviatura> <texto> = crea una abreviatura para el texto indicado. En el M.I, puedo escribir lo que elegí como abreviatura y luego de un espacio se va a generar la palabra completa
   Ctrl-x y Ctrl-a = si estoy parado sobre un numero, aumento o disminuyo su valor


Moverse entre archivos:
   por ejemplo cuando importo una función de otro archivo

   gd : me lleva a la definición de una función dentro del mismo archivo
   gf : me lleva a la definición de una función a otro archivo (me cambia de
			 archivo, por eso primero tengo que guardar cambios(con la config por defecto)) 

	 Para volver al archivo anterior: Ctrl + o
	 Para ir al archivo siguiente : Ctrl + i


Diccionario:
   Para usar el diccionario tengo que habilitarlo en el .vimrc(mas abajo) con las siguiente lineas:
      nnoremap <F2> :setlocal spell! spelllang=es<CR>
      nnoremap <F4> :setlocal spell! spelllang=en<CR>

   ]s : me pasa sobre el primer error
   z= : me lista las posibles opciones


Marcadores:
   :marks = muestra todas las marcas

   Locales: (único en cada buffer):
      m<letra> = marca una posición, estableciendo la marca <letra> en la posición actual
      '<letra> = salta a la linea donde se encuentra <letra>

   Globales: (valido para todos los buffers):
      m<letraMayuscula> = marca una posición, estableciendo la marca <letraMayuscula> en la posición actual
      '<letraMayuscula> = salta a la linea donde se encuentra <letraMayuscula>


Registros:
   por regla general, todo lo que borra texto lo guarda en un registro.
   Los comandos mas comunes que guardan en el registro son "y"(copiar), "d"(cortar) y "c"(cambiar) 
   
   :register = muestra todos los registros
   
   Para pegar el contenido de un registro uso la "p" (pegar)
   
   "<Char>p = pega el contenido del registro <Char>  En el M.N
   Ctrl-R <char> = pega el contenido del registro <Char>  En el M.I
   
   Registros automáticos:
      guardan en un registro automáticamente, hay muchos acá solo voy a mostrar uno
      El ultimo texto COPIADO de guarda en el registro "0 
   
   Registros nominales:
      Hay que ser explícitos sobre en cual registro guardar el texto y van de las letras "a" a la "z"
   
      "<Char><Command>
   
      Ejemplos:
       "ayiw <-- en el registro "a" guardo la copia de la palabra entera 
             (al ser una copia también lo guarda automáticamente en 
             el registro "0)
       "zdd  <-- en el registro "z" guardo toda la linea que corte
   
   Registros de lectura:
       .  Almacena el último texto insertado
       #  Almacena el nombre del ultimo archivo visitado
       :  Almacena lo último que fue ejecutado en la línea de comandos
       %  Almacena el nombre del archivo actual


Macros:
   Las macros son algo así como pedazos de código que me puedo guardar y ejecutar mas 
   adelante repetidamente.
         
   NOTA: las macros se guardan en los registros nominales (se acceden de otra forma),
        por lo que los puedo pisar si guardo algo en el mismo registro
    USO:
      q<char> = para empezar a grabar, se va a guardar en el registro <char>
      q       = para terminar de grabar

      @<char> = para ejecutar la macro almacenada en el registro <char>
      @@ = ejecuta la ultima macro ejecutada

        EJEMPLO)
            qa0gU$jq = esto lo que hace es pasar a mayúsculas toda la linea

                qa  --> empieza a grabar una macro en el registro a
                0   --> se para al principio de la linea
                gU$ --> pasa a mayúscula todo el texto hasta el final de la linea
                j   --> baja de la linea
                q   --> detiene la grabación de la linea

                Ahora si escribo @a se ejecuta esa macro y toda la linea se pasa a mayúscula


      Modificar una macro ya existente:

            1ro) :put <char>  --> me escribe en pantalla lo que tenga almacenado en el registro
            
            2do)  lo modifico a mi gusto

            3ro)  "<char>y$  --> lo vuelvo a guardar en el registro


            NOTA: algunos caracteres se representan de una forma distinta por vim, con las teclas
                  Ctrl-v + <Char> me escribe su forma, EJ Esc = 


Ventanas-pestañas-buffers:
   Buffers:
      Son espacio en memoria cada vez que abro una nueva pestaña:
      NOTA: cerrar una ventana o pestaña no hace que el buffer que representan también se cierre
   Comandos:  :ls  <-- me muestra todos los buffers	
     :bn  <-- me muevo al siguiente buffer (:bnext)
     :bp  <-- me muevo al buffer anterior (:bprevious)
     :b + nombreDeUnArchivo  <-- me muevo a ese archivo  (si lo tengo en el buffer)
     :b + unNumero  <-- me muevo al buffer que ocupe la posición del numero
     
     :bd + unNumero <-- elimina el buffer de ese numero (buffer delete)
     :bd <-- elimina el buffer en el que estoy
     :bd + nombreDeUnArchivo <-- elimina el buffer con ese nombre
     :qall <-- cierra todos los buffers(y sale de vim) 
     :qwall <-- guarda y cierra todos los buffers 
          
   Ventanas:
      las ventanas nos muestran el contenido de un buffer:
   Comandos:
      :split <unArchivo> = abre otro archivo en una divicion de la ventana de modo horizontal (:sp)
      :vsplit <unArchivo> = abre el otro archivo en una divicion de la ventana de modo vertical (:vsp)
      :new <unArchivo> = crea una nueva ventana
      Ctrl+wq = cierra una ventana
         
      Tamaño de las ventanas:
         divicion horizontal:
            Ctrl-w + = agranda la ventana (Ctrl-w, solar y luego tocar el +)
            Ctrl-w - = achica la ventana (Todas estas aceptan un numero para repetir la cantidad)
            Ctrl-w _ = aumenta  al maximo del tamaño permitido
         divicion vertical:
            Ctrl-w < = Agranda (12 Ctrl-w <  = agranda  12 veces)
            Ctrl-w > = Achica
            Ctrl-w | = aumenta al maximo del tamaño permitido
         General:
            Ctrl-w =  = iguala el tamaño de todas las ventanas

      Reposicionando las ventanas:
         Ctrl-w + H => cambia las ventanas de horizontal a vertical 
         Ctrl-w + J => cambia las vetanas de vertical a horizontal 
         Crrl-w + r => Cambia de posición las ventanas

   Pestañas:
      una pestaña es una colección de ventanas
     Comandos:
      vim -p [lista de archivos] = en la terminal, abre todos los archivos en pestañas diferentes
      :tabnew <-- abre una nueva ventana sin nombre (:tabe)
      :tabnew <unArchivo> <-- abre ese archivo en una nueva pestaña (:tabe)
      :tabclose <-- cierra la pestaña actual (:tabc es lo mismo)
      :gt <-- me muevo a la siguiente pestaña
      :gT <-- me muevo a la pestaña anterior 
      :tabs <-- me muestra todas las pestañas abiertas y que archivos tengo en cada una


Sesiones:
   Las sesiones guardan la información de todas las ventanas(Incluyendo el diseño)
   Por ejemplo si tengo tres ventanas y cierro el archivo, al volver a abrirlo ya no las voy
   a tener, para eso están las sesiones

   Creado una sesión:
      :mksession ==> me crea la sesión (y un archivo extra en el directorio actual)
      :mksession [una/ruta] ==> lo mismo de arriba pero me crea el archivo en la ruta descrita

   Abriendo una sesion
      :source Session.vim ==> abre la sesión (si tengo el archivo en el directorio actual)
      vim -S Session.vim  ==> (desde la terminal, fuera de vim) abre vim con la sesión ya cargada


Suspender
	 Ctrl-z o :stop  <-- suspende la ejecución y me manda a la terminal
	 fg (desde la terminal, no desde vim) <-- retoma la ejecución del código


Archivos cifrados:
   para crear un archivo cifrado:
      vim -x {nombre_Archivo}  una vez dentro me va a pedir la contraseña para luego 
                               poder descifrarlo

   Para cifrar un archivo ya creado:
      :X   luego me va a pedir que elija las contraseñas

   Para eliminar un cifrado:
      una vez dentro :set key=   no tiene que haber nada después del = 

   NOTA IMPORTANTE
   SUPER IMPORTANTE
      si alguien abre el archivo sin descifrar, vera codigo sin sentido, pero si lo modifica y lo guarda
      todo el archivo quedara corrupto y no se podrá descifrar luego
      RECOMIENDO EVITAR ENCRIPTAR ARCHIVOS ASI


Formas de abrir VIM:
   todos estas formas están explicadas también en sus respectivas secciones

   Vim sin ninguna configuración ni plugins:
      vim -u NONE <archivo>

   Vim con una "Session" ya activa:
      vim -S Session.vim 
      
   Vim con varias pestañas ya cargadas
      vim -p [lista de archivos] 

   Vim solo para ver (no permite modificar)   
      view {archivo} 


VIMRC:
   en el .vimrc es donde se guardan todas las configuraciones del editor
    en los entornos linux se encuentra en la raíz (créalo si no existe)

   Para abrir VIM sin tener en cuenta esta configuracion y/o plugins escribo en la terminal:
    vim -u NONE => sin nada, como viene por defencto vim

   Nota: algunos comando aquí explicados pueden cambiar dependiendo de como configuremos el vimrc


PLUGGINS!!! ---------------------------
   voy a usar el gestor de plugins PlugVIM, pero hay muchos mas.
   Cada pluggin puede tener su propia configuración y propios comandos, tener eso en mente
	 a la hora de buscar e instalar uno
         
   1ro)  tengo que instalar PlugVim desde su gitHub oficial
         
   2do) en el .vimrc tengo que poner:
       call plug#begin(<Ruta>)   NOTA) <Ruta> es la ruta en la que se van a guardar nuestros plugins
       ...
       ...
       ...
       call plug#end()
         
   3ro) entre esos dos mensajes tengo que escribir Plug <Nombre>
			 <Nombre>: es el nombre del pluggin y tiene que estar entre comillas simples ''
         
   4to) usar el comando para instalar los pluggins
         
   PlugVIM Comandos
     :PlugInstall = instala toda la lista de plugins que tengamos definida
     :PlugUpgrade = actualiza PlugVIM
     :PlugStatus = nos muestra el estado del Plug
     :PlugUpdate = Actualiza pluggins
               
   ---Comandos y configuraciones de mis pluggins
       tengo asignada la tecla lider el "espacio".

  Mis Pluggins:

   -----------------------
   Plug 'scrooloose/nerdtree'  <-- este plugin nos permite abrir un árbol de archivos (Buenardo)
      config: 
         let NERDTreeQuitOnOpen = 1  <-- para que se cierre una vez cambie de carpeta
         nmap <Leader>nt :NERDTreeToggle<CR>  <-- para abrir el plugging (teclaLider + n + t)
      USO:
         m = me muestra el menu y todas las opciones
         o = abre el archivo/carpeta
         s = abre el archivo pero en pantalla dividida
         t = abre el archivo pero en otra pestaña
   -----------------------
	 Plug 'christoomey/vim-tmux-navigator'  <-- este plug esta bueno con el anterior, me deja cambiar de pestaña con el teclado
     USO:
       Ctrl + las teclas de movimiento (h  j  k  l ) para movernos entre archivos
	 -----------------------
   Plug 'preservim/nerdcommenter'  <-- Este pluggin nos permite comentar y des-comentar bloques de código
     USO:
       <Leader>cc nos permite comentar un bloque de código seleccionado 
       <Leader>cu nos permite DES-comentar un bloque de código seleccionado
       <Leader>c<space> nos hace un toggle comment para el código seleccionado 
   -----------------------
   fzf  <-- es un buscador de archivos bastante potente
     USO:
      <Leader>fi = nos lista todos los archivos de esa carpeta que contengan una palabra especifica		
      <Leader>gf = nos lista todos los archivos de esa carpeta que contengan una palabra especifica y que ademas estén trackeados por Git
      <Leader>ag = nos lista todos los archivos que contengan una palabra especifica
   -----------------------
   zeavim   <--- es un buscador de documentación offline
      USO 
        <Leader><Leader>z = me abre en la barra de comandos un Docset: <lenguajeDeProg>
                            ahí escribo el lenguaje del que quiero preguntar y luego enter
                            Después me pide la funcionalidad especifica que quiero buscar
   -------------------------
   Bracey   <--- es un live server para html, css y javascript
      USO: 
        :Bracey  --> abre el live server (prestar atención en que puerto) 
        :BraceyStop  --> cierra el live server
        :BraceyReload --> recarga la pagina
   -------------------------
   Vim-Surround  <-- me permite insertar contenido antes y después de un texto
      USO:
         cambiando un contenedor:
            cs + actual + nuevo 
               cs = (change surronding)
            ejemplo:
               cs"' --> dentro de una palabra con comillas doble, lo que hace es cambiarlas por unas simples
               cs'<p>  --> cambia lo que esta entre comillas simples por una etiqueta p
               cst"  --> (change surrounding tag) cambia el tag por unas comillas
         Eliminando un contenedor
            ds + contenedor
               ds = (delete surround)
               ejemplo:
                  ds"  --> elimina las comillas
         Agregar un contenedor:
            ys + elem + contenedor
               ys = (you surround)
               ejemplo:
                  ysiw{  --> agrega una llave antes y después de la palabra en la que estoy parado
                        NOTA: si uso (,[ o { se va a agregar un espacio entre este y la palabra,
                        no pasa si uso ),} o ]
            yss + contenedor
               ejemplo:
                  yss"  --> agrega comillas a toda la linea
         seleccionar por bloque de codigo:
            S + texto
               ejemplo:
                   texto_seleccionado => S <p class="clase1"> => <p class="clase1">texto_seleccionado</p>
                   texto_seleccionado => S "  => "texto_seleccionado"
                   texto_seleccionado => S (  => ( texto_seleccionado )
   -----------------------
   UltiSnips  <---- me permite crear mis propios snippets (hay otro pluggin que ya trae un montón)
      USO:
         <F5> después de la palabra clave
   ---------------------
   Emmet  <--- El emmet de toda la vida
      USO:
         <C-k>, :Completa lo que falte
   ---------------------
   EasyMotion  <---- Es una especie de buscador 
      USO:
         <Leader>s : Me deja escribir dos letras, luego me marca todas las palabras en el archivo
         que las tengan, ademas de darme la oportunidad de ir a una de ellas.
         Tenes que probarlo para entenderlo, es dificil de explicar
   ---------------------
   CoC <--- es como un super plgguin, ofrece muchas cosas 

      USO básico:
         K => muestra la documentación
         <Leader>rn => renombra el texto que tengamos bajo el puntero
                        y lo cambia donde corresponda 
         <Leader>ac => nos muestra todas la acciones que puede hacer sobre 
                        el texto en el que estemos parados
         <Leader>Cd => nos lista todos los errores de código
         <Leader>Ce => nos lista todas las extensiones que tengamos instaladas(mas abajo)
         <Leader>Cc => nos lista todos los comandos que CoC puede realizar
         <Leader>Co => nos muestra un outLine de nuestro archivo

      Coc Extensions:
         Coc nos permite extender su funcionalidad instalando determinados "paquetes"

         coc-emmet => autocompletado para HTML, JSX y TSX
         coc-prettier => formateo de código (<Leader>p)
         coc-pairs => cierra automáticamente los: () [] {} "" '' ``  
         coc-snippets => nos permite manejar los snippets de UltiSnips  y otros de forma mas cómoda

      También hay que instalar las extensiones para cada lenguaje que queramos usar para 
      tener el autocompletado 
