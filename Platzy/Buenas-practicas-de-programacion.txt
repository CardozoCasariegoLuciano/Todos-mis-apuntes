
    Principios SOLID
    ----------------
    
    SOLID son cinco principios básicos de la programación orientada a objetos que ayudan a crear software mantenible en el tiempo
    
    S: Single Responsibility Principle (SRP)

    O: Open/Closed Principle (OCP)

    L: Liskov Substitution Principle (LSP)

    I: Interface Segregation Principle (ISP)

    D: Dependency Inversion Principle (DIP)
    
    
    
     S: Single Responsibility Principle (SRP): 
     
            Indica que cada clase tiene que tener un unico objetivo muy puntual.
            
                Las ventajas que estro trae es que es muy facil detectar errores y la reutilizacion de codigo
                
                
                
     O: Open/Closed Principle (OCP):
     
            Open/Closed Principle establece que una entidad de software debe quedarse abierta para su extensión, pero cerrada para su modificación.
            
            Eso significa que si quiero agregar algo nuevo al codigo lo puedo hacer facilmente sin modificar nada (por eso cerrado a la modificacion)
            
            
            
    L: Liskov Substitution Principle (LSP):
    
            El Liskov Substitution Principle establece que cada clase que hereda de otra puede usarse como su padre sin necesidad de conocer las diferencias entre ellas. Para que pueda darse este principio debe cumplir con dos puntos:

                *El cliente debe usar métodos de la clase padre únicamente.
                *La clase hija no debe alterar el comportamiento de los métodos de la clase padre.
                
            Osea que una clase hija tiene que agregar compartamietos con respecto a su padre, pero no modificar los ya existentes
            
            
            
     I: Interface Segregation Principle (ISP):
      
           El principio de segregación de interfaces nos dice un poco como estructurar nuestras interfaces de modo que cuando una clase implementa una interface, no se le exija implementar métodos que no necesita.
           
           
           
     D: Dependency Inversion Principle (DIP):
     
     
            Dependency Inversion Principle detalla que los módulos de alto nivel no deben depender de los de bajo nivel, ambos deben depender de abstracciones.
             Las abstracciones no deben depender de los detalles, los detalles deben depender de las abstracciones.
            
            (No me quedo muy claro)
            
            
            
    
    Patrones de diseño
    ------------------
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
            
            
 
 
